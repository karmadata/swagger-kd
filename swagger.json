{
  "openapi" : "3.0.0",
  "servers" : [ {
    "url" : "https://stg-kdrequest.karmadata.com"
  } ],
  "security" : [ {
    "oAuth2ClientCredentials" : [ "rolesPermissions" ]
  } ],
  "info" : {
    "description" : "The karmadata API provides ReST access to public and private clouds of data, with the ability to link related data entities and to do everything from simple searches, complex filters (grouped filter logic), location and text based filters, and analytics by grouping different datasets.  You can also create and query your own datasets and entities using our Modify API, or via bulk upload, in order to unlock hidden datasets and maximize their value\nNOTE these examples are using the oauth2 client credential flow to authorize.  Click the authorize button, accept the default client id and secret, and check all available scopes.",
    "version" : "3.1.0-oas3",
    "title" : "KarmaData API",
    "contact" : {
      "email" : "sean.power@karmadata.com"
    },
    "license" : {
      "name" : "Contact us for terms and conditions.",
      "url" : "https://www.karmadata.com/contact"
    }
  },
  "tags" : [ {
    "name" : "Data",
    "description" : "Explore available data, properties, related entities."
  }, {
    "name" : "Search",
    "description" : "Search for a specific entity type (i.e., KdPhysician, KdDrugRxNorm) and receive a list of that entity type in return."
  }, {
    "name" : "Group",
    "description" : "Group data for analytics.  Choose properties from any entities that are related to each other as columns to select."
  }, {
    "name" : "Select",
    "description" : "Select data for reporting.  Choose properties from any entities that are related to each other (very similar to Group) as columns to list in a report.  This is similar to Group except that the data is not grouped and aggregated.  Somewhat more flexible than Search in that you can select properties from any entities that are related to each other, and can also be used to reduce the size of the JSON payload if your UI only needs 2 of 100 properties on an entity."
  } ],
  "paths" : {
    "/Data/Available" : {
      "get" : {
        "tags" : [ "Data" ],
        "summary" : "Explore available datasets",
        "operationId" : "dataAvaiableGet",
        "description" : "Retrieve a list of any available EntityType.",
        "responses" : {
          "200" : {
            "description" : "a list of related EntityTypes"
          },
          "401" : {
            "description" : "unauthorized"
          }
        }
      }
    },
    "/Data/{EntityType}/Properties" : {
      "get" : {
        "tags" : [ "Data" ],
        "summary" : "Obtain information on properties of the selected EntityType.",
        "operationId" : "dataPropertiesGet",
        "description" : "Retrieve a list of EntityType properties",
        "parameters" : [ {
          "in" : "path",
          "name" : "EntityType",
          "required" : true,
          "description" : "EntityType you need property information for. Use KdPhysician for testing",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "a list of properties"
          },
          "401" : {
            "description" : "unauthorized"
          }
        }
      }
    },
    "/Data/{EntityType}/Related" : {
      "get" : {
        "tags" : [ "Data" ],
        "summary" : "Explore EntityTypes that are related to the EntityType you are interested in.",
        "operationId" : "dataRelatedGet",
        "description" : "Retrieve a list of any related EntityTypes.",
        "parameters" : [ {
          "in" : "path",
          "name" : "EntityType",
          "required" : true,
          "description" : "EntityType to search. Use KdPhysician for testing",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "a list of related EntityTypes"
          },
          "401" : {
            "description" : "unauthorized"
          }
        }
      }
    },
    "/Search/{EntityType}" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Performs a basic search using free text or location based (for geocoded entities)",
        "operationId" : "searchGet",
        "description" : "Retrieve a list of any EntityType.",
        "parameters" : [ {
          "in" : "path",
          "name" : "EntityType",
          "required" : true,
          "description" : "EntityType to search. Use KdPhysician for testing",
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "q",
          "description" : "Optional search string for free text search",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "start",
          "description" : "Row number to start with for pagination, default 1",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          }
        }, {
          "in" : "query",
          "name" : "rowsPerPage",
          "description" : "Number of rows to show on page, used for pagination, default 10",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 10
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KdResponseSearchApi"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized"
          }
        }
      },
      "post" : {
        "tags" : [ "Search" ],
        "summary" : "Perform a complex search using a KdRequest object.",
        "operationId" : "searchPost",
        "description" : "A ReSTful abstraction of SQL select query for a single EntityType (think selecting data from a single dataset or table).  This request may contain complex filters (each a FilterItem) on the entity type or related entity types.  FilterItems can be grouped and assigned to different FilterGroups that are joined to the main search request using logical operators And, Or, AndNot, OrNot.  The first FilterGroup is dedicated to the entity you are searching for (so FilterGroup[0] is limited to properties of the Entity being searched), this sets the boundaries for your result set.  FilterGroup[1-n] can contain properties of any related EntityType, and are joined to the requst using And, AndNot, Or, OrNot.",
        "parameters" : [ {
          "in" : "path",
          "name" : "EntityType",
          "required" : true,
          "description" : "EntityType to search. Use KdPhysician for testing",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KdResponseSearchApi"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized"
          },
          "500" : {
            "description" : "Uncaught error.  Yell at us."
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestSearchApi"
              }
            }
          },
          "description" : "An object that contains an array of KdRequestItems, each representing a request for data.  Currently KD only accepts a single RequestItem for data."
        }
      }
    },
    "/Group" : {
      "post" : {
        "tags" : [ "Group" ],
        "summary" : "Perform a complex grouping / aggregation operation using a KdRequestItem.",
        "operationId" : "groupPost",
        "description" : "A ReSTful abstraction of SQL group by query for any number of properties across any entity types that can be joined (think entity and fact datasets or tables).  Group requests have SelectItems (just like the Select API requests). However the SelectItem operations must be aggregation operations like GroupBy, Distinct, Count, Sum, etc. FilterItems and FilterGroups work exactly the same as for Select, with the first FilterGroup[0] dedicated to filtering the main request and limited to only those EntityTypes represented in the SelectItem array.",
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/KdResponseGroupApi"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestGroupApi"
              }
            }
          },
          "description" : "An object that contains an array of RequestItems, each representing a request for data.  Currently KD only accepts a single RequestItem for data."
        }
      }
    },
    "/Select" : {
      "post" : {
        "tags" : [ "Select" ],
        "summary" : "Perform a complex Select operation using a KdRequestItem.",
        "operationId" : "selectPost",
        "description" : "A ReSTful abstraction of SQL Select query for any number of properties across any entity types that can be joined (think entity and fact datasets or tables).  Select requests have SelectItems (just like the Group API requests). However the SelectItem operations must be a Select operation (as opposed to aggregation operations like GroupBy, Distinct, Count, Sum, etc.) FilterItems and FilterGroups work exactly the same as for Group, with the first FilterGroup[0] dedicated to filtering the main request and limited to only those EntityTypes represented in the SelectItem array.",
        "responses" : {
          "200" : {
            "description" : "Select results in the form of an Array of Arrays (aoa), that correspond to the order of the SelectItems passed in.  The data can return One To Many results if that is how the Entities selected related to each other, so understanding the domain model is important.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KdResponseSelectApi"
                }
              }
            }
          },
          "401" : {
            "description" : "unauthorized"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestSelectApi"
              }
            }
          },
          "description" : "An object that contains an array of RequestItems, each representing a request for data.  Currently KD only accepts a single RequestItem for data."
        }
      }
    },
    "/Modify" : {
      "post" : {
        "tags" : [ "Modify" ],
        "summary" : "perform a series of data modifying operations. A transaction is wrapped around these operations so they all succeed or fail together.",
        "operationId" : "modify",
        "description" : "Insert or update database using the supplied objects.",
        "responses" : {
          "200" : {
            "description" : "all operations succeeded"
          },
          "400" : {
            "description" : "some operations failed"
          },
          "401" : {
            "description" : "unauthorized"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ModifyOperations"
              }
            }
          },
          "description" : "An array of operations to perform. Each operations is an insert/update/delete to an entity."
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "oAuth2ClientCredentials" : {
        "type" : "oauth2",
        "description" : "Use client_id = f9862d8f-740c-4f12-b9c8-d577d408ae4d client_secret p3rc5GXm8uAQDk8x2F3FBQmuJ6KONNRx2BDAazPaLwsB2rsx3D",
        "flows" : {
          "clientCredentials" : {
            "tokenUrl" : "https://auth.thorz.com/auth/1d32bb0a-5e21-4c69-a943-e4138901707d/application/connect/token",
            "scopes" : {
              "rolesPermissions" : "rolesPermissions scope"
            }
          }
        }
      }
    },
    "schemas" : {
      "RequestSearchApi" : {
        "type" : "object",
        "description" : "A wrapping object for the list of RequestItems.",
        "properties" : {
          "RequestItemList" : {
            "$ref" : "#/components/schemas/RequestItemListSearchApi"
          }
        }
      },
      "RequestItemListSearchApi" : {
        "type" : "object",
        "description" : "An array of RequestItems, each representing a separate request for data.  As of v3.1.0 only one RequestItem is accepted.  Stay tuned for future releases.  The RequestItem represents a request for data, as filtered by the FilterGroups.",
        "items" : {
          "properties" : {
            "EntityType" : {
              "description" : "Only used in Search API, defines the EntityType to be searched and returned.",
              "type" : "string",
              "example" : "KdPhysician"
            },
            "KdEntityAction" : {
              "type" : "string",
              "example" : "Search"
            },
            "FilterGroups" : {
              "$ref" : "#/components/schemas/FilterGroups"
            },
            "RelatedEntities" : {
              "type" : "array",
              "description" : "A list of related EntityTypes to the Search EntityType.  Returned in the KdResponse as an inline array property RelatedEntities as unfiltered lists, one list for each relateld EntityType requested.",
              "items" : {
                "type" : "string",
                "example" : "KdPhysicianGroup"
              }
            }
          },
          "type" : "object"
        }
      },
      "RequestGroupApi" : {
        "type" : "object",
        "description" : "A wrapping object for the list of RequestItems.",
        "properties" : {
          "RequestItemList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RequestItemListGroupApi"
            }
          }
        }
      },
      "RequestItemListGroupApi" : {
        "type" : "array",
        "description" : "An array of RequestItems, each representing a separate request for data.  As of v3.1.0 only one RequestItem is accepted.  Stay tuned for future releases.  The RequestItem represents a request for data, as filtered by the FilterGroups.",
        "items" : {
          "properties" : {
            "EntityType" : {
              "description" : "Only used in Search API, defines the EntityType to be searched and returned.",
              "type" : "string",
              "example" : "KdPhysician"
            },
            "KdEntityAction" : {
              "type" : "string",
              "example" : "Group"
            },
            "FilterGroups" : {
              "$ref" : "#/components/schemas/FilterGroups"
            },
            "SelectList" : {
              "type" : "array",
              "description" : "A list of related EntityTypes to the Search EntityType.  Returned in the KdResponse as an inline array property RelatedEntities as unfiltered lists, one list for each relateld EntityType requested.",
              "example" : [ {
                "EntityType" : "KdPhysician",
                "PropertyName" : "Name.Given",
                "DataType" : "String",
                "GroupFunction" : "GroupBy"
              }, {
                "GroupFunction" : "Count"
              }, {
                "EntityType" : "KdPhysicianGroup",
                "PropertyName" : "KdId",
                "DataType" : "String",
                "GroupFunction" : "Distinct",
                "Direction" : "desc"
              } ],
              "items" : {
                "properties" : {
                  "EntityType" : {
                    "type" : "string"
                  },
                  "PropertyName" : {
                    "type" : "string"
                  },
                  "DataType" : {
                    "type" : "string",
                    "description" : "The data type of the Property being aggregated"
                  },
                  "GroupFunction" : {
                    "type" : "string",
                    "description" : "Valid function values are GroupBy, Count, Sum, Avg, StdDev, Median.  Valid function values for any DataType are GroupBy, Min, Max, Mode, Distinct. Valid function values for Number and Date DataType are Median. Valid function values for Number only DataType are Sum, Avg, StdDev."
                  },
                  "Direction" : {
                    "type" : "string"
                  },
                  "Format" : {
                    "type" : "string",
                    "description" : "format represents how to group by a Date or Number property can be represented if GroupBy. * a Date property groups by data ranges can have a format of 'yyyy', 'yyyy-mm', 'yyyy-mm-dd', 'mm-dd', etc. * a Number property groups by number ranges and can have format of '<1,1-10,11-20,21-30,>30' * the 1-10 is a between 1 and 10 inclusive (so includes the values 1 and 10)"
                  }
                },
                "type" : "object"
              }
            }
          },
          "type" : "object"
        }
      },
      "RequestSelectApi" : {
        "type" : "object",
        "description" : "A wrapping object for the list of RequestItems.",
        "properties" : {
          "RequestItemList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RequestItemListSelectApi"
            }
          }
        }
      },
      "RequestItemListSelectApi" : {
        "type" : "array",
        "description" : "An array of RequestItems, each representing a separate request for data.  As of v3.1.0 only one RequestItem is accepted.  Stay tuned for future releases.  The RequestItem represents a request for data, as filtered by the FilterGroups.",
        "items" : {
          "properties" : {
            "EntityType" : {
              "description" : "Only used in Search API, defines the EntityType to be searched and returned.",
              "type" : "string",
              "example" : "KdPhysician"
            },
            "KdEntityAction" : {
              "type" : "string",
              "example" : "Select"
            },
            "FilterGroups" : {
              "$ref" : "#/components/schemas/FilterGroups"
            },
            "SelectList" : {
              "type" : "array",
              "description" : "A list of related EntityTypes to the Search EntityType.  Returned in the KdResponse as an inline array property RelatedEntities as unfiltered lists, one list for each relateld EntityType requested.",
              "example" : [ {
                "EntityType" : "KdPhysician",
                "PropertyName" : "Name.Given",
                "DataType" : "String",
                "GroupFunction" : "Select"
              }, {
                "EntityType" : "KdPhysician",
                "PropertyName" : "NPI",
                "DataType" : "String",
                "GroupFunction" : "Select",
                "Direction" : "desc"
              } ],
              "items" : {
                "properties" : {
                  "EntityType" : {
                    "type" : "string"
                  },
                  "PropertyName" : {
                    "type" : "string"
                  },
                  "DataType" : {
                    "type" : "string",
                    "description" : "The data type of the Property being aggregated"
                  },
                  "GroupFunction" : {
                    "type" : "string",
                    "description" : "Valid function values are Select.  The aggregation Group functions can not be used in Select API"
                  },
                  "Direction" : {
                    "type" : "string",
                    "description" : "The only way to sort a Select or Group API request is to put the Direction directly on the SelectItem (currently the Select and Group API implement sorting differently than Search API - this will be changed in future release)."
                  },
                  "Format" : {
                    "type" : "string",
                    "description" : "format represents how to format a Date or Number property using a to_char function. Dates can have formats of 'yyyy', 'yyyy-mm', 'yyyy-mm-dd', 'mm-dd', 'IW', etc.  Numbers can have format of '<1,1-10,11-20,21-30,>30' * the 1-10 is a between 1 and 10 inclusive (so includes the values 1 and 10)"
                  }
                },
                "type" : "object"
              }
            }
          },
          "type" : "object"
        }
      },
      "FilterGroups" : {
        "type" : "array",
        "description" : "A FilterGroup is a logical group of work that is joined to the RequestItem (the main request, or the universe against which all FilterGroups work) to create a result set.  The first FilterGroup in the array, or FilterGroup[0] aka Filter Group Zero, is always applied to the main request to set the universe - and therefore may only contain properties of the EntityType in the main request.  This concept of Filter Group Zero (which is always an And) vs FilterGroups 1-n is crucial to understanding how the Kd API works.",
        "items" : {
          "properties" : {
            "Filters" : {
              "$ref" : "#/components/schemas/Filters"
            },
            "JoinEntity" : {
              "type" : "string",
              "example" : "KdPhysician",
              "description" : "This is how the FilterGroup is joined to the RequestItem (the main request).  Some FilterGroups may contain filters from multiple EntityTypes, this JoinEntity forces the developer to choose which of the filter entities should be used to join to the main request (using different joins will sometimes give very different answers - as you are asking a different question)."
            },
            "Logic" : {
              "type" : "string",
              "example" : "And",
              "description" : "How the FilterGroup is joined to the RequestItem (the main request).  Valid options are And|Or|AndNot|OrNot"
            }
          },
          "type" : "object"
        }
      },
      "Filters" : {
        "type" : "array",
        "description" : "An array of Filters.  Each EntityType is an object with various properties (strings, numbers, dates, boolean, objects (typically but not always other EntityTypes), and arrays (typically but not always other EntityTypes).  Each property of every EntityType is fair game for use as a filter.  So you could ask for all physicians with a first name of John by simply using the example",
        "items" : {
          "properties" : {
            "EntityType" : {
              "type" : "string",
              "example" : "KdPhysician"
            },
            "PropertyName" : {
              "type" : "string",
              "example" : "GraduationYear",
              "description" : "Any valid property of the EntityType (JSON) is fair game for filtering as long as a single property and not an array.  Arrays should be filtered using the related entity that the array is derived from.  If filtering on a complex object, use dot notation (foo.bar) as the PropertyName."
            },
            "DataType" : {
              "type" : "string",
              "example" : "Number",
              "description" : "Valid DataType are String|Date|Number|Boolean|EntityType like KdPhysician"
            },
            "Operator" : {
              "type" : "string",
              "example" : "Gte",
              "description" : "Valid filterOperator values for every DataType are Eq|NotEq|Gt|Gte|Lt|Lte|Between|Null|NotNull.  Valid filter Operator values for string datatype only are Like, NotLike."
            },
            "Logic" : {
              "type" : "string",
              "example" : "And"
            },
            "Values" : {
              "type" : "array",
              "items" : {
                "example" : [ 1995 ],
                "description" : "An array of the specified DataType.  So if Filter is a number filter, then an array of numbers. If Between Operator, only the first two items in the values array are considered.  If Gt|Gte|Lt|Lte|Like|NotLike Operator only the first item in the values array is considered. If Eq|NotEq all items in the values array are considered. If Like|NotLike operator, the term needs to have wildcards noted by % placeholder.  If DataType is boolean, only the first item in the values array is considered."
              }
            }
          },
          "type" : "object"
        }
      },
      "ResultSearchApi" : {
        "type" : "object",
        "description" : "A wrapping object for the data returned by API.",
        "properties" : {
          "Count" : {
            "type" : "number",
            "description" : "The total number of records found using your request.  Note this is NOT the same as the length of the array of results (as you may find 1.4 million records, but only requested items 1-10 for your application)."
          },
          "Result" : {
            "type" : "array",
            "items" : {
              "description" : "An array of the EntityType you requested or null if zero results found."
            }
          }
        }
      },
      "ResultGroupApi" : {
        "type" : "object",
        "description" : "A wrapping object for the data returned by Group API.",
        "properties" : {
          "Count" : {
            "type" : "number",
            "description" : "The total number of records found using your request.  Note this is NOT the same as the length of the array of results (as you may find 1.4 million records, but only requested items 1-10 for your application)."
          },
          "Result" : {
            "type" : "array",
            "items" : {
              "description" : "An array of array of property values you requested or null if zero results found.  Each item in the Result array is itself an array of property values (in the same order of the properties requested in the SelectItemList)."
            }
          }
        }
      },
      "ResultSelectApi" : {
        "type" : "object",
        "description" : "A wrapping object for the data returned by Select API.",
        "properties" : {
          "Count" : {
            "type" : "number",
            "description" : "The total number of records found using your request.  Note this is NOT the same as the length of the array of results (as you may find 1.4 million records, but only requested items 1-10 for your application)."
          },
          "Result" : {
            "type" : "array",
            "items" : {
              "description" : "An array of array of the items you requested or null if zero results found.  Each item in the Result array is itself an array of property values (in the same order of the properties requested in the SelectItemList)."
            }
          }
        }
      },
      "KdResponseSearchApi" : {
        "type" : "object",
        "description" : "A wrapping object for the Search API response.  The KdRequest is what was ACTUALLY requested vs what you may have sent in via POST.  An example reason for a difference would be if the server side tags on additional filters to say only return data for a logged in User or for an account, etc...  Typically happens when the Kd API is used server to server (application proxy to Kd API) instead of direct UI client to Kd API.",
        "properties" : {
          "KdRequest" : {
            "$ref" : "#/components/schemas/RequestSearchApi"
          },
          "KdResult" : {
            "$ref" : "#/components/schemas/ResultSearchApi"
          }
        }
      },
      "KdResponseGroupApi" : {
        "type" : "object",
        "description" : "A wrapping object for the Group API response.  The KdRequest is what was ACTUALLY requested vs what you may have sent in via POST.  An example reason for a difference would be if the server side tags on additional filters to say only return data for a logged in User or for an account, etc...  Typically happens when the Kd API is proxied behind a server, and used server to server (application proxy to Kd API) instead of direct UI client to Kd API.",
        "properties" : {
          "KdRequest" : {
            "$ref" : "#/components/schemas/RequestGroupApi"
          },
          "KdResult" : {
            "$ref" : "#/components/schemas/ResultGroupApi"
          }
        }
      },
      "KdResponseSelectApi" : {
        "type" : "object",
        "description" : "A wrapping object for the Select API response.  The KdRequest is what was ACTUALLY requested vs what you may have sent in via POST.  An example reason for a difference would be if the server side tags on additional filters to say only return data for a logged in User or for an account, etc...  Typically happens when the Kd API is proxied behind a server, and used server to server (application proxy to Kd API) instead of direct UI client to Kd API.",
        "properties" : {
          "KdRequest" : {
            "$ref" : "#/components/schemas/RequestSelectApi"
          },
          "KdResult" : {
            "$ref" : "#/components/schemas/ResultSelectApi"
          }
        }
      },
      "ModifyOperations" : {
        "type" : "array",
        "items" : {
          "properties" : {
            "Operation" : {
              "type" : "string",
              "description" : "the operation to perform (Insert|Update|Delete)",
              "example" : "Update"
            },
            "Entity" : {
              "type" : "string",
              "description" : "specifies the EntityType this operation is performed on",
              "example" : "SwaggerPhysician"
            },
            "Values" : {
              "$ref" : "#/components/schemas/SwaggerPhysician"
            }
          },
          "type" : "object"
        }
      },
      "SwaggerPhysician" : {
        "type" : "object",
        "description" : "an example SwaggerPhysician object",
        "properties" : {
          "KdId" : {
            "type" : "string",
            "example" : "1316000193"
          },
          "EntityType" : {
            "type" : "string",
            "example" : "SwaggerPhysician"
          },
          "KdLabel" : {
            "type" : "string",
            "example" : "Stephen Miller"
          }
        }
      }
    }
  }
}